{"ast":null,"code":"import React,{useRef,useEffect,useState}from'react';import Editor from'@monaco-editor/react';import{useSimulatorStore}from'../store/simulatorStore';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CodeEditor=()=>{const editorRef=useRef(null);const[compileResult,setCompileResult]=useState(null);const[isCompiling,setIsCompiling]=useState(false);const{sourceCode,setSourceCode,loadProgram,cpu,currentStep}=useSimulatorStore();const handleEditorDidMount=(editor,monaco)=>{editorRef.current=editor;// Register LEGv8 language\nmonaco.languages.register({id:'legv8'});// Define LEGv8 syntax highlighting\nmonaco.languages.setMonarchTokensProvider('legv8',{tokenizer:{root:[// Comments (LEGv8 uses semicolon for comments)\n[/;.*$/,'comment'],// Instructions\n[/\\b(ADD|SUB|AND|ORR|EOR|LSL|LSR|BR|B\\.EQ|B\\.NE|B\\.LT|B\\.LE|B\\.GT|B\\.GE|B\\.MI|B\\.PL|B\\.VS|B\\.VC|B\\.HI|B\\.LS|B\\.AL|CBZ|CBNZ|B|BL|ADDI|SUBI|ANDI|ORRI|EORI|LDUR|STUR|LDURB|STURB|LDURH|STURH|LDURSW|MOVZ|MOVK|CMP|CMPI|ADDS|SUBS|ANDS|NOP)\\b/,'keyword'],// Registers\n[/\\b(X[0-9]|X[12][0-9]|X3[01]|XZR|SP|LR)\\b/,'variable'],// Numbers\n[/#-?\\d+/,'number'],[/\\b0x[0-9a-fA-F]+\\b/,'number'],[/\\b\\d+\\b/,'number'],// Labels\n[/^[a-zA-Z_][a-zA-Z0-9_]*:/,'type'],// Strings\n[/\".*?\"/,'string'],// Brackets and operators\n[/[[\\]]/,'delimiter.bracket'],[/[,]/,'delimiter']]}});// Define LEGv8 theme\nmonaco.editor.defineTheme('legv8-theme',{base:'vs',inherit:true,rules:[{token:'keyword',foreground:'0066CC',fontStyle:'bold'},{token:'variable',foreground:'008000',fontStyle:'bold'},{token:'number',foreground:'FF6600'},{token:'comment',foreground:'808080',fontStyle:'italic'},{token:'string',foreground:'CC0000'},{token:'type',foreground:'800080',fontStyle:'bold'}],colors:{'editor.background':'#FFFFFF','editor.lineHighlightBackground':'#E3F2FD','editorLineNumber.foreground':'#999999','editorLineNumber.activeForeground':'#0066CC'}});// Set the theme\nmonaco.editor.setTheme('legv8-theme');};const handleEditorChange=value=>{if(value!==undefined){setSourceCode(value);// Clear previous compile results when code changes\nsetCompileResult(null);}};const validateLEGv8Syntax=code=>{const errors=[];const lines=code.split('\\n');let instructionCount=0;// Valid LEGv8 instructions\nconst validInstructions=['ADD','SUB','AND','ORR','EOR','LSL','LSR','ADDI','SUBI','ANDI','ORRI','EORI','LDUR','STUR','LDURB','STURB','LDURH','STURH','LDURSW','B','BL','BR','CBZ','CBNZ','B.EQ','B.NE','B.LT','B.LE','B.GT','B.GE','B.MI','B.PL','B.VS','B.VC','B.HI','B.LS','B.AL','CMP','CMPI','ADDS','SUBS','ANDS','MOVZ','MOVK','NOP'];// Valid registers\nconst validRegisters=[...Array.from({length:32},(_,i)=>\"X\".concat(i)),'XZR','SP','LR','FP'];lines.forEach((line,index)=>{const trimmedLine=line.trim();// Skip empty lines and comments (now using semicolon)\nif(!trimmedLine||trimmedLine.startsWith(';')){return;}// Check for labels\nif(trimmedLine.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)){return;// Valid label\n}// Parse instruction\nconst parts=trimmedLine.split(/\\s+/);if(parts.length===0)return;const instruction=parts[0].toUpperCase();// Check if instruction is valid\nif(!validInstructions.includes(instruction)){errors.push({line:index+1,message:\"Unknown instruction: \".concat(instruction),type:'error'});return;}instructionCount++;// Basic syntax validation for different instruction types\nif(['ADD','SUB','AND','ORR','EOR'].includes(instruction)){// R-type: ADD Rd, Rn, Rm\nif(parts.length!==4){errors.push({line:index+1,message:\"\".concat(instruction,\" requires 3 operands: \").concat(instruction,\" Rd, Rn, Rm\"),type:'error'});return;}// Validate registers\nconst registers=parts.slice(1).map(r=>r.replace(',','').toUpperCase());registers.forEach((reg,regIndex)=>{if(!validRegisters.includes(reg)){errors.push({line:index+1,message:\"Invalid register: \".concat(reg),type:'error'});}});}if(['ADDI','SUBI','ANDI','ORRI','EORI'].includes(instruction)){// I-type: ADDI Rd, Rn, #immediate\nif(parts.length!==4){errors.push({line:index+1,message:\"\".concat(instruction,\" requires 3 operands: \").concat(instruction,\" Rd, Rn, #immediate\"),type:'error'});return;}// Check immediate value format\nconst immediate=parts[3];if(!immediate.startsWith('#')){errors.push({line:index+1,message:\"Immediate value must start with #: \".concat(immediate),type:'error'});}else{const value=immediate.substring(1);const numValue=parseInt(value);if(isNaN(numValue)||numValue<-2048||numValue>2047){errors.push({line:index+1,message:\"Immediate value out of range (-2048 to 2047): \".concat(value),type:'warning'});}}}if(['LDUR','STUR'].includes(instruction)){// D-type: LDUR Rt, [Rn, #offset]\nif(parts.length<3){errors.push({line:index+1,message:\"\".concat(instruction,\" requires memory address format: \").concat(instruction,\" Rt, [Rn, #offset]\"),type:'error'});return;}// Check memory address format\nconst memoryPart=parts.slice(2).join(' ');if(!memoryPart.match(/\\[.*\\]/)){errors.push({line:index+1,message:\"Memory address must be enclosed in brackets: \".concat(memoryPart),type:'error'});}}if(['CBZ','CBNZ'].includes(instruction)){// CB-type: CBZ Rt, label\nif(parts.length!==3){errors.push({line:index+1,message:\"\".concat(instruction,\" requires 2 operands: \").concat(instruction,\" Rt, label\"),type:'error'});}}if(instruction.startsWith('B.')||instruction==='B'){// B-type: B label or B.cond label\nif(parts.length!==2&&instruction!=='B'){errors.push({line:index+1,message:\"\".concat(instruction,\" requires 1 operand: \").concat(instruction,\" label\"),type:'error'});}}});return{success:errors.filter(e=>e.type==='error').length===0,errors,instructionCount};};const formatCode=code=>{const lines=code.split('\\n');const formattedLines=lines.map(line=>{const trimmed=line.trim();// Skip empty lines and comments\nif(!trimmed||trimmed.startsWith(';')){return line;}// Check if it's a label (ends with colon)\nif(trimmed.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)){return trimmed;// Labels stay at column 0\n}// Check if it's an instruction\nconst parts=trimmed.split(/\\s+/);if(parts.length>0){const instruction=parts[0].toUpperCase();const validInstructions=['ADD','SUB','AND','ORR','EOR','LSL','LSR','ADDI','SUBI','ANDI','ORRI','EORI','LDUR','STUR','LDURB','STURB','LDURH','STURH','LDURSW','B','BL','BR','CBZ','CBNZ','B.EQ','B.NE','B.LT','B.LE','B.GT','B.GE','B.MI','B.PL','B.VS','B.VC','B.HI','B.LS','B.AL','CMP','CMPI','ADDS','SUBS','ANDS','MOVZ','MOVK','NOP'];if(validInstructions.includes(instruction)){return'\\t'+trimmed;// Add tab indentation for instructions\n}}return line;// Return original line if not recognized\n});return formattedLines.join('\\n');};const handleCompile=()=>{setIsCompiling(true);// Simulate compilation delay\nsetTimeout(()=>{const result=validateLEGv8Syntax(sourceCode);setCompileResult(result);// If compilation is successful, format the code and load the program\nif(result.success){const formattedCode=formatCode(sourceCode);setSourceCode(formattedCode);parseAndLoadProgram(formattedCode);}setIsCompiling(false);},500);};const parseAndLoadProgram=code=>{// Parse assembly code into instructions\nconst lines=code.split('\\n').map(line=>line.trim()).filter(line=>line&&!line.startsWith(';')&&!line.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/));const instructions=lines.map((line,index)=>({address:index*4,machineCode:'00000000',assembly:line,type:'R',fields:{opcode:line.split(/\\s+/)[0]||'NOP'}}));loadProgram(instructions);};// Highlight current line\nuseEffect(()=>{if(editorRef.current&&cpu.currentInstruction){const editor=editorRef.current;const model=editor.getModel();if(model){// Clear previous decorations\nconst oldDecorations=editor.getModel().getAllDecorations();const decorationIds=oldDecorations.filter(d=>d.options.className==='current-line-highlight').map(d=>d.id);editor.deltaDecorations(decorationIds,[]);// Find the actual line number of the current instruction in the source code\nconst sourceLines=sourceCode.split('\\n');let actualLineNumber=1;let instructionCount=0;for(let i=0;i<sourceLines.length;i++){const line=sourceLines[i].trim();// Skip empty lines, comments (now semicolon), and labels\nif(line&&!line.startsWith(';')&&!line.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)){if(instructionCount===cpu.currentInstructionIndex){actualLineNumber=i+1;break;}instructionCount++;}}// Add new decoration for current line\nconst decorations=[{range:{startLineNumber:actualLineNumber,startColumn:1,endLineNumber:actualLineNumber,endColumn:model.getLineMaxColumn(actualLineNumber)},options:{className:'current-line-highlight',isWholeLine:true,backgroundColor:'#FFE082',marginClassName:'current-line-margin'}}];editor.deltaDecorations([],decorations);// Scroll to current line\neditor.revealLineInCenter(actualLineNumber);}}},[cpu.currentInstructionIndex,cpu.currentInstruction,sourceCode]);return/*#__PURE__*/_jsxs(\"div\",{className:\"h-full flex flex-col\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between p-3 bg-gray-50 border-b\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-sm font-semibold text-gray-700\",children:\"LEGv8 Assembly Editor\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2 text-xs text-gray-500\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"Step: \",currentStep,\"/\",cpu.instructionMemory.length]}),/*#__PURE__*/_jsx(\"span\",{children:\"\\u2022\"}),/*#__PURE__*/_jsxs(\"span\",{children:[\"PC: \",cpu.pc]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleCompile,disabled:isCompiling||!sourceCode.trim(),className:\"px-3 py-1 rounded text-xs font-medium transition-colors \".concat(isCompiling?'bg-gray-300 text-gray-500 cursor-not-allowed':compileResult!==null&&compileResult!==void 0&&compileResult.success?'bg-green-500 text-white hover:bg-green-600':compileResult&&!compileResult.success?'bg-red-500 text-white hover:bg-red-600':'bg-blue-500 text-white hover:bg-blue-600'),children:isCompiling?'⏳ Compiling...':'🔨 Compile'})]})]}),compileResult&&/*#__PURE__*/_jsxs(\"div\",{className:\"p-3 border-b \".concat(compileResult.success?'bg-green-50 border-green-200':'bg-red-50 border-red-200'),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between mb-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-sm font-medium \".concat(compileResult.success?'text-green-800':'text-red-800'),children:compileResult.success?'✅ Compilation Successful':'❌ Compilation Failed'}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-xs text-gray-600\",children:[compileResult.instructionCount,\" instructions\"]})]}),compileResult.errors.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"space-y-1 max-h-24 overflow-y-auto\",children:compileResult.errors.map((error,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs p-2 rounded \".concat(error.type==='error'?'bg-red-100 text-red-700':'bg-yellow-100 text-yellow-700'),children:[/*#__PURE__*/_jsxs(\"span\",{className:\"font-medium\",children:[\"Line \",error.line,\":\"]}),\" \",error.message]},index))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex-1\",children:/*#__PURE__*/_jsx(Editor,{height:\"100%\",language:\"legv8\",theme:\"legv8-theme\",value:sourceCode,onChange:handleEditorChange,onMount:handleEditorDidMount,options:{minimap:{enabled:false},fontSize:14,lineNumbers:'on',roundedSelection:false,scrollBeyondLastLine:false,automaticLayout:true,tabSize:2,insertSpaces:true,wordWrap:'on',lineNumbersMinChars:3,glyphMargin:true,folding:false,selectOnLineNumbers:true,selectionHighlight:false,cursorStyle:'line',renderLineHighlight:'line'}})}),/*#__PURE__*/_jsx(\"div\",{className:\"p-2 bg-gray-50 border-t text-xs text-gray-600\",children:/*#__PURE__*/_jsxs(\"details\",{children:[/*#__PURE__*/_jsx(\"summary\",{className:\"cursor-pointer font-medium\",children:\"LEGv8 Quick Reference\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2 space-y-1\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Arithmetic:\"}),\" ADD, SUB, ADDI, SUBI\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Logical:\"}),\" AND, ORR, EOR, ANDI, ORRI, EORI\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Memory:\"}),\" LDUR, STUR, LDURB, STURB\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Branch:\"}),\" B, B.EQ, B.NE, CBZ, CBNZ\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Registers:\"}),\" X0-X31, XZR (zero), SP (stack pointer)\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Comments:\"}),\" Use semicolon (;) for comments\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Labels:\"}),\" label: (colon at end)\"]})]})]})})]});};export default CodeEditor;","map":{"version":3,"names":["React","useRef","useEffect","useState","Editor","useSimulatorStore","jsx","_jsx","jsxs","_jsxs","CodeEditor","editorRef","compileResult","setCompileResult","isCompiling","setIsCompiling","sourceCode","setSourceCode","loadProgram","cpu","currentStep","handleEditorDidMount","editor","monaco","current","languages","register","id","setMonarchTokensProvider","tokenizer","root","defineTheme","base","inherit","rules","token","foreground","fontStyle","colors","setTheme","handleEditorChange","value","undefined","validateLEGv8Syntax","code","errors","lines","split","instructionCount","validInstructions","validRegisters","Array","from","length","_","i","concat","forEach","line","index","trimmedLine","trim","startsWith","match","parts","instruction","toUpperCase","includes","push","message","type","registers","slice","map","r","replace","reg","regIndex","immediate","substring","numValue","parseInt","isNaN","memoryPart","join","success","filter","e","formatCode","formattedLines","trimmed","handleCompile","setTimeout","result","formattedCode","parseAndLoadProgram","instructions","address","machineCode","assembly","fields","opcode","currentInstruction","model","getModel","oldDecorations","getAllDecorations","decorationIds","d","options","className","deltaDecorations","sourceLines","actualLineNumber","currentInstructionIndex","decorations","range","startLineNumber","startColumn","endLineNumber","endColumn","getLineMaxColumn","isWholeLine","backgroundColor","marginClassName","revealLineInCenter","children","instructionMemory","pc","onClick","disabled","error","height","language","theme","onChange","onMount","minimap","enabled","fontSize","lineNumbers","roundedSelection","scrollBeyondLastLine","automaticLayout","tabSize","insertSpaces","wordWrap","lineNumbersMinChars","glyphMargin","folding","selectOnLineNumbers","selectionHighlight","cursorStyle","renderLineHighlight"],"sources":["/home/hoangnhoo/HTMT/src/components/CodeEditor.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport Editor from '@monaco-editor/react';\nimport { useSimulatorStore } from '../store/simulatorStore';\n\ninterface CompileError {\n  line: number;\n  message: string;\n  type: 'error' | 'warning';\n}\n\ninterface CompileResult {\n  success: boolean;\n  errors: CompileError[];\n  instructionCount: number;\n}\n\nconst CodeEditor: React.FC = () => {\n  const editorRef = useRef<any>(null);\n  const [compileResult, setCompileResult] = useState<CompileResult | null>(null);\n  const [isCompiling, setIsCompiling] = useState(false);\n  \n  const {\n    sourceCode,\n    setSourceCode,\n    loadProgram,\n    cpu,\n    currentStep,\n  } = useSimulatorStore();\n\n  const handleEditorDidMount = (editor: any, monaco: any) => {\n    editorRef.current = editor;\n\n    // Register LEGv8 language\n    monaco.languages.register({ id: 'legv8' });\n\n    // Define LEGv8 syntax highlighting\n    monaco.languages.setMonarchTokensProvider('legv8', {\n      tokenizer: {\n        root: [\n          // Comments (LEGv8 uses semicolon for comments)\n          [/;.*$/, 'comment'],\n          \n          // Instructions\n          [/\\b(ADD|SUB|AND|ORR|EOR|LSL|LSR|BR|B\\.EQ|B\\.NE|B\\.LT|B\\.LE|B\\.GT|B\\.GE|B\\.MI|B\\.PL|B\\.VS|B\\.VC|B\\.HI|B\\.LS|B\\.AL|CBZ|CBNZ|B|BL|ADDI|SUBI|ANDI|ORRI|EORI|LDUR|STUR|LDURB|STURB|LDURH|STURH|LDURSW|MOVZ|MOVK|CMP|CMPI|ADDS|SUBS|ANDS|NOP)\\b/, 'keyword'],\n          \n          // Registers\n          [/\\b(X[0-9]|X[12][0-9]|X3[01]|XZR|SP|LR)\\b/, 'variable'],\n          \n          // Numbers\n          [/#-?\\d+/, 'number'],\n          [/\\b0x[0-9a-fA-F]+\\b/, 'number'],\n          [/\\b\\d+\\b/, 'number'],\n          \n          // Labels\n          [/^[a-zA-Z_][a-zA-Z0-9_]*:/, 'type'],\n          \n          // Strings\n          [/\".*?\"/, 'string'],\n          \n          // Brackets and operators\n          [/[[\\]]/, 'delimiter.bracket'],\n          [/[,]/, 'delimiter'],\n        ],\n      },\n    });\n\n    // Define LEGv8 theme\n    monaco.editor.defineTheme('legv8-theme', {\n      base: 'vs',\n      inherit: true,\n      rules: [\n        { token: 'keyword', foreground: '0066CC', fontStyle: 'bold' },\n        { token: 'variable', foreground: '008000', fontStyle: 'bold' },\n        { token: 'number', foreground: 'FF6600' },\n        { token: 'comment', foreground: '808080', fontStyle: 'italic' },\n        { token: 'string', foreground: 'CC0000' },\n        { token: 'type', foreground: '800080', fontStyle: 'bold' },\n      ],\n      colors: {\n        'editor.background': '#FFFFFF',\n        'editor.lineHighlightBackground': '#E3F2FD',\n        'editorLineNumber.foreground': '#999999',\n        'editorLineNumber.activeForeground': '#0066CC',\n      }\n    });\n\n    // Set the theme\n    monaco.editor.setTheme('legv8-theme');\n  };\n\n  const handleEditorChange = (value: string | undefined) => {\n    if (value !== undefined) {\n      setSourceCode(value);\n      // Clear previous compile results when code changes\n      setCompileResult(null);\n    }\n  };\n\n  const validateLEGv8Syntax = (code: string): CompileResult => {\n    const errors: CompileError[] = [];\n    const lines = code.split('\\n');\n    let instructionCount = 0;\n\n    // Valid LEGv8 instructions\n    const validInstructions = [\n      'ADD', 'SUB', 'AND', 'ORR', 'EOR', 'LSL', 'LSR',\n      'ADDI', 'SUBI', 'ANDI', 'ORRI', 'EORI',\n      'LDUR', 'STUR', 'LDURB', 'STURB', 'LDURH', 'STURH', 'LDURSW',\n      'B', 'BL', 'BR', 'CBZ', 'CBNZ',\n      'B.EQ', 'B.NE', 'B.LT', 'B.LE', 'B.GT', 'B.GE',\n      'B.MI', 'B.PL', 'B.VS', 'B.VC', 'B.HI', 'B.LS', 'B.AL',\n      'CMP', 'CMPI', 'ADDS', 'SUBS', 'ANDS',\n      'MOVZ', 'MOVK', 'NOP'\n    ];\n\n    // Valid registers\n    const validRegisters = [\n      ...Array.from({length: 32}, (_, i) => `X${i}`),\n      'XZR', 'SP', 'LR', 'FP'\n    ];\n\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n      \n      // Skip empty lines and comments (now using semicolon)\n      if (!trimmedLine || trimmedLine.startsWith(';')) {\n        return;\n      }\n\n      // Check for labels\n      if (trimmedLine.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)) {\n        return; // Valid label\n      }\n\n      // Parse instruction\n      const parts = trimmedLine.split(/\\s+/);\n      if (parts.length === 0) return;\n\n      const instruction = parts[0].toUpperCase();\n      \n      // Check if instruction is valid\n      if (!validInstructions.includes(instruction)) {\n        errors.push({\n          line: index + 1,\n          message: `Unknown instruction: ${instruction}`,\n          type: 'error'\n        });\n        return;\n      }\n\n      instructionCount++;\n\n      // Basic syntax validation for different instruction types\n      if (['ADD', 'SUB', 'AND', 'ORR', 'EOR'].includes(instruction)) {\n        // R-type: ADD Rd, Rn, Rm\n        if (parts.length !== 4) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 3 operands: ${instruction} Rd, Rn, Rm`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Validate registers\n        const registers = parts.slice(1).map(r => r.replace(',', '').toUpperCase());\n        registers.forEach((reg, regIndex) => {\n          if (!validRegisters.includes(reg)) {\n            errors.push({\n              line: index + 1,\n              message: `Invalid register: ${reg}`,\n              type: 'error'\n            });\n          }\n        });\n      }\n\n      if (['ADDI', 'SUBI', 'ANDI', 'ORRI', 'EORI'].includes(instruction)) {\n        // I-type: ADDI Rd, Rn, #immediate\n        if (parts.length !== 4) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 3 operands: ${instruction} Rd, Rn, #immediate`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Check immediate value format\n        const immediate = parts[3];\n        if (!immediate.startsWith('#')) {\n          errors.push({\n            line: index + 1,\n            message: `Immediate value must start with #: ${immediate}`,\n            type: 'error'\n          });\n        } else {\n          const value = immediate.substring(1);\n          const numValue = parseInt(value);\n          if (isNaN(numValue) || numValue < -2048 || numValue > 2047) {\n            errors.push({\n              line: index + 1,\n              message: `Immediate value out of range (-2048 to 2047): ${value}`,\n              type: 'warning'\n            });\n          }\n        }\n      }\n\n      if (['LDUR', 'STUR'].includes(instruction)) {\n        // D-type: LDUR Rt, [Rn, #offset]\n        if (parts.length < 3) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires memory address format: ${instruction} Rt, [Rn, #offset]`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Check memory address format\n        const memoryPart = parts.slice(2).join(' ');\n        if (!memoryPart.match(/\\[.*\\]/)) {\n          errors.push({\n            line: index + 1,\n            message: `Memory address must be enclosed in brackets: ${memoryPart}`,\n            type: 'error'\n          });\n        }\n      }\n\n      if (['CBZ', 'CBNZ'].includes(instruction)) {\n        // CB-type: CBZ Rt, label\n        if (parts.length !== 3) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 2 operands: ${instruction} Rt, label`,\n            type: 'error'\n          });\n        }\n      }\n\n      if (instruction.startsWith('B.') || instruction === 'B') {\n        // B-type: B label or B.cond label\n        if (parts.length !== 2 && instruction !== 'B') {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 1 operand: ${instruction} label`,\n            type: 'error'\n          });\n        }\n      }\n    });\n\n    return {\n      success: errors.filter(e => e.type === 'error').length === 0,\n      errors,\n      instructionCount\n    };\n  };\n\n  const formatCode = (code: string): string => {\n    const lines = code.split('\\n');\n    const formattedLines = lines.map(line => {\n      const trimmed = line.trim();\n      \n      // Skip empty lines and comments\n      if (!trimmed || trimmed.startsWith(';')) {\n        return line;\n      }\n      \n      // Check if it's a label (ends with colon)\n      if (trimmed.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)) {\n        return trimmed; // Labels stay at column 0\n      }\n      \n      // Check if it's an instruction\n      const parts = trimmed.split(/\\s+/);\n      if (parts.length > 0) {\n        const instruction = parts[0].toUpperCase();\n        const validInstructions = [\n          'ADD', 'SUB', 'AND', 'ORR', 'EOR', 'LSL', 'LSR',\n          'ADDI', 'SUBI', 'ANDI', 'ORRI', 'EORI',\n          'LDUR', 'STUR', 'LDURB', 'STURB', 'LDURH', 'STURH', 'LDURSW',\n          'B', 'BL', 'BR', 'CBZ', 'CBNZ',\n          'B.EQ', 'B.NE', 'B.LT', 'B.LE', 'B.GT', 'B.GE',\n          'B.MI', 'B.PL', 'B.VS', 'B.VC', 'B.HI', 'B.LS', 'B.AL',\n          'CMP', 'CMPI', 'ADDS', 'SUBS', 'ANDS',\n          'MOVZ', 'MOVK', 'NOP'\n        ];\n        \n        if (validInstructions.includes(instruction)) {\n          return '\\t' + trimmed; // Add tab indentation for instructions\n        }\n      }\n      \n      return line; // Return original line if not recognized\n    });\n    \n    return formattedLines.join('\\n');\n  };\n\n  const handleCompile = () => {\n    setIsCompiling(true);\n    \n    // Simulate compilation delay\n    setTimeout(() => {\n      const result = validateLEGv8Syntax(sourceCode);\n      setCompileResult(result);\n      \n      // If compilation is successful, format the code and load the program\n      if (result.success) {\n        const formattedCode = formatCode(sourceCode);\n        setSourceCode(formattedCode);\n        parseAndLoadProgram(formattedCode);\n      }\n      \n      setIsCompiling(false);\n    }, 500);\n  };\n\n  const parseAndLoadProgram = (code: string) => {\n    // Parse assembly code into instructions\n    const lines = code.split('\\n')\n      .map(line => line.trim())\n      .filter(line => line && !line.startsWith(';') && !line.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/));\n\n    const instructions = lines.map((line, index) => ({\n      address: index * 4,\n      machineCode: '00000000',\n      assembly: line,\n      type: 'R' as const,\n      fields: { \n        opcode: line.split(/\\s+/)[0] || 'NOP'\n      }\n    }));\n\n    loadProgram(instructions);\n  };\n\n  // Highlight current line\n  useEffect(() => {\n    if (editorRef.current && cpu.currentInstruction) {\n      const editor = editorRef.current;\n      const model = editor.getModel();\n      \n      if (model) {\n        // Clear previous decorations\n        const oldDecorations = editor.getModel().getAllDecorations();\n        const decorationIds = oldDecorations\n          .filter((d: any) => d.options.className === 'current-line-highlight')\n          .map((d: any) => d.id);\n        \n        editor.deltaDecorations(decorationIds, []);\n\n        // Find the actual line number of the current instruction in the source code\n        const sourceLines = sourceCode.split('\\n');\n        let actualLineNumber = 1;\n        let instructionCount = 0;\n        \n        for (let i = 0; i < sourceLines.length; i++) {\n          const line = sourceLines[i].trim();\n          // Skip empty lines, comments (now semicolon), and labels\n          if (line && !line.startsWith(';') && !line.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)) {\n            if (instructionCount === cpu.currentInstructionIndex) {\n              actualLineNumber = i + 1;\n              break;\n            }\n            instructionCount++;\n          }\n        }\n\n        // Add new decoration for current line\n        const decorations = [\n          {\n            range: {\n              startLineNumber: actualLineNumber,\n              startColumn: 1,\n              endLineNumber: actualLineNumber,\n              endColumn: model.getLineMaxColumn(actualLineNumber),\n            },\n            options: {\n              className: 'current-line-highlight',\n              isWholeLine: true,\n              backgroundColor: '#FFE082',\n              marginClassName: 'current-line-margin',\n            },\n          },\n        ];\n\n        editor.deltaDecorations([], decorations);\n\n        // Scroll to current line\n        editor.revealLineInCenter(actualLineNumber);\n      }\n    }\n  }, [cpu.currentInstructionIndex, cpu.currentInstruction, sourceCode]);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"flex items-center justify-between p-3 bg-gray-50 border-b\">\n        <h3 className=\"text-sm font-semibold text-gray-700\">LEGv8 Assembly Editor</h3>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n            <span>Step: {currentStep}/{cpu.instructionMemory.length}</span>\n            <span>•</span>\n            <span>PC: {cpu.pc}</span>\n          </div>\n          <button\n            onClick={handleCompile}\n            disabled={isCompiling || !sourceCode.trim()}\n            className={`px-3 py-1 rounded text-xs font-medium transition-colors ${\n              isCompiling\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                : compileResult?.success\n                ? 'bg-green-500 text-white hover:bg-green-600'\n                : compileResult && !compileResult.success\n                ? 'bg-red-500 text-white hover:bg-red-600'\n                : 'bg-blue-500 text-white hover:bg-blue-600'\n            }`}\n          >\n            {isCompiling ? '⏳ Compiling...' : '🔨 Compile'}\n          </button>\n        </div>\n      </div>\n      \n      {/* Compile Results */}\n      {compileResult && (\n        <div className={`p-3 border-b ${\n          compileResult.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'\n        }`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className={`text-sm font-medium ${\n              compileResult.success ? 'text-green-800' : 'text-red-800'\n            }`}>\n              {compileResult.success ? '✅ Compilation Successful' : '❌ Compilation Failed'}\n            </span>\n            <span className=\"text-xs text-gray-600\">\n              {compileResult.instructionCount} instructions\n            </span>\n          </div>\n          \n          {compileResult.errors.length > 0 && (\n            <div className=\"space-y-1 max-h-24 overflow-y-auto\">\n              {compileResult.errors.map((error, index) => (\n                <div key={index} className={`text-xs p-2 rounded ${\n                  error.type === 'error' ? 'bg-red-100 text-red-700' : 'bg-yellow-100 text-yellow-700'\n                }`}>\n                  <span className=\"font-medium\">Line {error.line}:</span> {error.message}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      \n      <div className=\"flex-1\">\n        <Editor\n          height=\"100%\"\n          language=\"legv8\"\n          theme=\"legv8-theme\"\n          value={sourceCode}\n          onChange={handleEditorChange}\n          onMount={handleEditorDidMount}\n          options={{\n            minimap: { enabled: false },\n            fontSize: 14,\n            lineNumbers: 'on',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            automaticLayout: true,\n            tabSize: 2,\n            insertSpaces: true,\n            wordWrap: 'on',\n            lineNumbersMinChars: 3,\n            glyphMargin: true,\n            folding: false,\n            selectOnLineNumbers: true,\n            selectionHighlight: false,\n            cursorStyle: 'line',\n            renderLineHighlight: 'line',\n          }}\n        />\n      </div>\n\n      {/* Quick reference */}\n      <div className=\"p-2 bg-gray-50 border-t text-xs text-gray-600\">\n        <details>\n          <summary className=\"cursor-pointer font-medium\">LEGv8 Quick Reference</summary>\n          <div className=\"mt-2 space-y-1\">\n            <div><strong>Arithmetic:</strong> ADD, SUB, ADDI, SUBI</div>\n            <div><strong>Logical:</strong> AND, ORR, EOR, ANDI, ORRI, EORI</div>\n            <div><strong>Memory:</strong> LDUR, STUR, LDURB, STURB</div>\n            <div><strong>Branch:</strong> B, B.EQ, B.NE, CBZ, CBNZ</div>\n            <div><strong>Registers:</strong> X0-X31, XZR (zero), SP (stack pointer)</div>\n            <div><strong>Comments:</strong> Use semicolon (;) for comments</div>\n            <div><strong>Labels:</strong> label: (colon at end)</div>\n          </div>\n        </details>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}