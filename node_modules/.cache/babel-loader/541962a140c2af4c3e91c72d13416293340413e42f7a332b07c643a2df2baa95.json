{"ast":null,"code":"import { create } from 'zustand';\nimport { immer } from 'zustand/middleware/immer';\nconst initialCPUState = {\n  pc: 0,\n  registers: new Array(32).fill(0),\n  flags: {\n    zero: false,\n    negative: false,\n    carry: false,\n    overflow: false\n  },\n  instructionMemory: [],\n  dataMemory: new Map(),\n  controlSignals: {\n    reg2Loc: false,\n    uncondBranch: false,\n    flagBranch: false,\n    zeroBranch: false,\n    memRead: false,\n    memToReg: false,\n    memWrite: false,\n    flagWrite: false,\n    aluSrc: false,\n    aluOp: '00',\n    regWrite: false\n  },\n  currentInstruction: null,\n  currentInstructionIndex: 0\n};\nexport const useSimulatorStore = create()(immer((set, get) => ({\n  // Initial state\n  mode: 'simulation',\n  isRunning: false,\n  isPaused: false,\n  animationSpeed: 1,\n  cpu: initialCPUState,\n  sourceCode: '',\n  currentStep: 0,\n  totalSteps: 0,\n  // Actions\n  setMode: mode => set(state => {\n    state.mode = mode;\n  }),\n  setAnimationSpeed: speed => set(state => {\n    state.animationSpeed = speed;\n  }),\n  loadProgram: instructions => set(state => {\n    state.cpu.instructionMemory = instructions;\n    state.totalSteps = instructions.length;\n    state.currentStep = 0;\n    state.cpu.pc = 0;\n    state.cpu.currentInstructionIndex = 0;\n    state.cpu.currentInstruction = instructions[0] || null;\n  }),\n  setSourceCode: code => set(state => {\n    state.sourceCode = code;\n  }),\n  // Execution control\n  step: () => set(state => {\n    if (state.currentStep < state.totalSteps) {\n      state.currentStep += 1;\n      state.cpu.currentInstructionIndex = state.currentStep;\n      state.cpu.currentInstruction = state.cpu.instructionMemory[state.currentStep] || null;\n      state.cpu.pc = state.currentStep * 4; // Assuming 4-byte instructions\n    }\n  }),\n  run: () => set(state => {\n    state.isRunning = true;\n    state.isPaused = false;\n  }),\n  pause: () => set(state => {\n    state.isPaused = true;\n  }),\n  reset: () => set(state => {\n    state.isRunning = false;\n    state.isPaused = false;\n    state.currentStep = 0;\n    state.cpu.pc = 0;\n    state.cpu.currentInstructionIndex = 0;\n    state.cpu.currentInstruction = state.cpu.instructionMemory[0] || null;\n    state.cpu.registers = new Array(32).fill(0);\n    state.cpu.flags = {\n      zero: false,\n      negative: false,\n      carry: false,\n      overflow: false\n    };\n    state.cpu.dataMemory.clear();\n  }),\n  jumpToStep: step => set(state => {\n    if (step >= 0 && step < state.totalSteps) {\n      state.currentStep = step;\n      state.cpu.currentInstructionIndex = step;\n      state.cpu.currentInstruction = state.cpu.instructionMemory[step];\n      state.cpu.pc = step * 4;\n    }\n  }),\n  // CPU state updates\n  updateRegister: (index, value) => set(state => {\n    if (index >= 0 && index < 32) {\n      state.cpu.registers[index] = value;\n    }\n  }),\n  updateFlags: flags => set(state => {\n    Object.assign(state.cpu.flags, flags);\n  }),\n  updatePC: value => set(state => {\n    state.cpu.pc = value;\n  }),\n  updateMemory: (address, value) => set(state => {\n    state.cpu.dataMemory.set(address, value);\n  })\n})));","map":{"version":3,"names":["create","immer","initialCPUState","pc","registers","Array","fill","flags","zero","negative","carry","overflow","instructionMemory","dataMemory","Map","controlSignals","reg2Loc","uncondBranch","flagBranch","zeroBranch","memRead","memToReg","memWrite","flagWrite","aluSrc","aluOp","regWrite","currentInstruction","currentInstructionIndex","useSimulatorStore","set","get","mode","isRunning","isPaused","animationSpeed","cpu","sourceCode","currentStep","totalSteps","setMode","state","setAnimationSpeed","speed","loadProgram","instructions","length","setSourceCode","code","step","run","pause","reset","clear","jumpToStep","updateRegister","index","value","updateFlags","Object","assign","updatePC","updateMemory","address"],"sources":["/home/hoangnhoo/HTMT/src/store/simulatorStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { immer } from 'zustand/middleware/immer';\nimport { SimulatorState, CPUState, Instruction, SimulationMode } from '../types';\n\ninterface SimulatorStore extends SimulatorState {\n  // Actions\n  setMode: (mode: SimulationMode) => void;\n  setAnimationSpeed: (speed: number) => void;\n  loadProgram: (instructions: Instruction[]) => void;\n  setSourceCode: (code: string) => void;\n  \n  // Execution control\n  step: () => void;\n  run: () => void;\n  pause: () => void;\n  reset: () => void;\n  jumpToStep: (step: number) => void;\n  \n  // CPU state updates\n  updateRegister: (index: number, value: number) => void;\n  updateFlags: (flags: Partial<CPUState['flags']>) => void;\n  updatePC: (value: number) => void;\n  updateMemory: (address: number, value: number) => void;\n}\n\nconst initialCPUState: CPUState = {\n  pc: 0,\n  registers: new Array(32).fill(0),\n  flags: {\n    zero: false,\n    negative: false,\n    carry: false,\n    overflow: false,\n  },\n  instructionMemory: [],\n  dataMemory: new Map(),\n  controlSignals: {\n    reg2Loc: false,\n    uncondBranch: false,\n    flagBranch: false,\n    zeroBranch: false,\n    memRead: false,\n    memToReg: false,\n    memWrite: false,\n    flagWrite: false,\n    aluSrc: false,\n    aluOp: '00',\n    regWrite: false,\n  },\n  currentInstruction: null,\n  currentInstructionIndex: 0,\n};\n\nexport const useSimulatorStore = create<SimulatorStore>()(\n  immer((set, get) => ({\n    // Initial state\n    mode: 'simulation',\n    isRunning: false,\n    isPaused: false,\n    animationSpeed: 1,\n    cpu: initialCPUState,\n    sourceCode: '',\n    currentStep: 0,\n    totalSteps: 0,\n\n    // Actions\n    setMode: (mode) =>\n      set((state) => {\n        state.mode = mode;\n      }),\n\n    setAnimationSpeed: (speed) =>\n      set((state) => {\n        state.animationSpeed = speed;\n      }),\n\n    loadProgram: (instructions) =>\n      set((state) => {\n        state.cpu.instructionMemory = instructions;\n        state.totalSteps = instructions.length;\n        state.currentStep = 0;\n        state.cpu.pc = 0;\n        state.cpu.currentInstructionIndex = 0;\n        state.cpu.currentInstruction = instructions[0] || null;\n      }),\n\n    setSourceCode: (code) =>\n      set((state) => {\n        state.sourceCode = code;\n      }),\n\n    // Execution control\n    step: () =>\n      set((state) => {\n        if (state.currentStep < state.totalSteps) {\n          state.currentStep += 1;\n          state.cpu.currentInstructionIndex = state.currentStep;\n          state.cpu.currentInstruction = \n            state.cpu.instructionMemory[state.currentStep] || null;\n          state.cpu.pc = state.currentStep * 4; // Assuming 4-byte instructions\n        }\n      }),\n\n    run: () =>\n      set((state) => {\n        state.isRunning = true;\n        state.isPaused = false;\n      }),\n\n    pause: () =>\n      set((state) => {\n        state.isPaused = true;\n      }),\n\n    reset: () =>\n      set((state) => {\n        state.isRunning = false;\n        state.isPaused = false;\n        state.currentStep = 0;\n        state.cpu.pc = 0;\n        state.cpu.currentInstructionIndex = 0;\n        state.cpu.currentInstruction = state.cpu.instructionMemory[0] || null;\n        state.cpu.registers = new Array(32).fill(0);\n        state.cpu.flags = {\n          zero: false,\n          negative: false,\n          carry: false,\n          overflow: false,\n        };\n        state.cpu.dataMemory.clear();\n      }),\n\n    jumpToStep: (step) =>\n      set((state) => {\n        if (step >= 0 && step < state.totalSteps) {\n          state.currentStep = step;\n          state.cpu.currentInstructionIndex = step;\n          state.cpu.currentInstruction = state.cpu.instructionMemory[step];\n          state.cpu.pc = step * 4;\n        }\n      }),\n\n    // CPU state updates\n    updateRegister: (index, value) =>\n      set((state) => {\n        if (index >= 0 && index < 32) {\n          state.cpu.registers[index] = value;\n        }\n      }),\n\n    updateFlags: (flags) =>\n      set((state) => {\n        Object.assign(state.cpu.flags, flags);\n      }),\n\n    updatePC: (value) =>\n      set((state) => {\n        state.cpu.pc = value;\n      }),\n\n    updateMemory: (address, value) =>\n      set((state) => {\n        state.cpu.dataMemory.set(address, value);\n      }),\n  }))\n); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}