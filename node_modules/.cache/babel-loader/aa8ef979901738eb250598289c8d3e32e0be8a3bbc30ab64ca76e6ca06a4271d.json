{"ast":null,"code":"import { gsap } from 'gsap';\nexport class CPUAnimationController {\n  constructor() {\n    this.timeline = void 0;\n    this.timeline = gsap.timeline();\n  }\n\n  // Animate data flow between components\n  animateDataFlow(animation) {\n    return new Promise(resolve => {\n      const {\n        from,\n        to,\n        data,\n        config\n      } = animation;\n\n      // Create a visual data element\n      const dataElement = this.createDataElement(data);\n\n      // Position at source\n      const fromElement = document.querySelector(`[data-component=\"${from}\"]`);\n      const toElement = document.querySelector(`[data-component=\"${to}\"]`);\n      if (!fromElement || !toElement) {\n        resolve();\n        return;\n      }\n      const fromRect = fromElement.getBoundingClientRect();\n      const toRect = toElement.getBoundingClientRect();\n      gsap.set(dataElement, {\n        x: fromRect.left + fromRect.width / 2,\n        y: fromRect.top + fromRect.height / 2,\n        opacity: 1\n      });\n\n      // Animate to destination\n      gsap.to(dataElement, {\n        x: toRect.left + toRect.width / 2,\n        y: toRect.top + toRect.height / 2,\n        duration: config.duration,\n        ease: config.ease,\n        delay: config.delay || 0,\n        onComplete: () => {\n          this.removeDataElement(dataElement);\n          resolve();\n        }\n      });\n    });\n  }\n\n  // Highlight active component\n  highlightComponent(componentId, duration = 0.5) {\n    const element = document.querySelector(`[data-component=\"${componentId}\"]`);\n    if (!element) return;\n    gsap.to(element, {\n      scale: 1.05,\n      boxShadow: '0 0 20px rgba(59, 130, 246, 0.5)',\n      duration: duration,\n      yoyo: true,\n      repeat: 1\n    });\n  }\n\n  // Animate control signal activation\n  activateControlSignal(signalId) {\n    const element = document.querySelector(`[data-signal=\"${signalId}\"]`);\n    if (!element) return;\n    gsap.fromTo(element, {\n      opacity: 0.3\n    }, {\n      opacity: 1,\n      duration: 0.3,\n      repeat: 3,\n      yoyo: true\n    });\n  }\n\n  // Animate register value change\n  animateRegisterChange(registerIndex, newValue) {\n    const element = document.querySelector(`[data-register=\"${registerIndex}\"]`);\n    if (!element) return;\n\n    // Flash animation for value change\n    gsap.fromTo(element, {\n      backgroundColor: '#FEF3C7'\n    }, {\n      backgroundColor: '#FFFFFF',\n      duration: 1,\n      ease: 'power2.out'\n    });\n\n    // Update the value with typewriter effect\n    this.animateValueChange(element, newValue);\n  }\n\n  // Animate flag changes\n  animateFlags(flags) {\n    Object.entries(flags).forEach(([flag, value]) => {\n      const element = document.querySelector(`[data-flag=\"${flag}\"]`);\n      if (!element) return;\n      gsap.to(element, {\n        color: value ? '#10B981' : '#6B7280',\n        scale: value ? 1.1 : 1,\n        duration: 0.3\n      });\n    });\n  }\n\n  // Create visual data element for animations\n  createDataElement(data) {\n    const element = document.createElement('div');\n    element.className = 'absolute z-50 bg-cpu-blue text-white px-2 py-1 rounded text-xs font-mono pointer-events-none';\n    element.textContent = `0x${data.toString(16).toUpperCase().padStart(8, '0')}`;\n    document.body.appendChild(element);\n    return element;\n  }\n\n  // Remove data element after animation\n  removeDataElement(element) {\n    gsap.to(element, {\n      opacity: 0,\n      scale: 0.8,\n      duration: 0.2,\n      onComplete: () => {\n        element.remove();\n      }\n    });\n  }\n\n  // Animate value change with typewriter effect\n  animateValueChange(element, newValue) {\n    const hexValue = `0x${newValue.toString(16).toUpperCase().padStart(8, '0')}`;\n    let currentText = '';\n    gsap.to({}, {\n      duration: 0.5,\n      onUpdate: function () {\n        const progress = this.progress();\n        const targetLength = Math.floor(hexValue.length * progress);\n        currentText = hexValue.substring(0, targetLength);\n        element.textContent = currentText;\n      }\n    });\n  }\n\n  // Clear all animations\n  clear() {\n    this.timeline.clear();\n    gsap.killTweensOf('*');\n  }\n\n  // Pause all animations\n  pause() {\n    this.timeline.pause();\n  }\n\n  // Resume all animations\n  resume() {\n    this.timeline.resume();\n  }\n\n  // Set animation speed\n  setSpeed(speed) {\n    gsap.globalTimeline.timeScale(speed);\n  }\n}\n\n// Singleton instance\nexport const animationController = new CPUAnimationController();","map":{"version":3,"names":["gsap","CPUAnimationController","constructor","timeline","animateDataFlow","animation","Promise","resolve","from","to","data","config","dataElement","createDataElement","fromElement","document","querySelector","toElement","fromRect","getBoundingClientRect","toRect","set","x","left","width","y","top","height","opacity","duration","ease","delay","onComplete","removeDataElement","highlightComponent","componentId","element","scale","boxShadow","yoyo","repeat","activateControlSignal","signalId","fromTo","animateRegisterChange","registerIndex","newValue","backgroundColor","animateValueChange","animateFlags","flags","Object","entries","forEach","flag","value","color","createElement","className","textContent","toString","toUpperCase","padStart","body","appendChild","remove","hexValue","currentText","onUpdate","progress","targetLength","Math","floor","length","substring","clear","killTweensOf","pause","resume","setSpeed","speed","globalTimeline","timeScale","animationController"],"sources":["/home/hoangnhoo/HTMT/src/utils/animations.ts"],"sourcesContent":["import { gsap } from 'gsap';\nimport { DataFlowAnimation } from '../types';\n\nexport class CPUAnimationController {\n  private timeline: gsap.core.Timeline;\n  \n  constructor() {\n    this.timeline = gsap.timeline();\n  }\n\n  // Animate data flow between components\n  animateDataFlow(animation: DataFlowAnimation): Promise<void> {\n    return new Promise((resolve) => {\n      const { from, to, data, config } = animation;\n      \n      // Create a visual data element\n      const dataElement = this.createDataElement(data);\n      \n      // Position at source\n      const fromElement = document.querySelector(`[data-component=\"${from}\"]`);\n      const toElement = document.querySelector(`[data-component=\"${to}\"]`);\n      \n      if (!fromElement || !toElement) {\n        resolve();\n        return;\n      }\n\n      const fromRect = fromElement.getBoundingClientRect();\n      const toRect = toElement.getBoundingClientRect();\n\n      gsap.set(dataElement, {\n        x: fromRect.left + fromRect.width / 2,\n        y: fromRect.top + fromRect.height / 2,\n        opacity: 1,\n      });\n\n      // Animate to destination\n      gsap.to(dataElement, {\n        x: toRect.left + toRect.width / 2,\n        y: toRect.top + toRect.height / 2,\n        duration: config.duration,\n        ease: config.ease,\n        delay: config.delay || 0,\n        onComplete: () => {\n          this.removeDataElement(dataElement);\n          resolve();\n        },\n      });\n    });\n  }\n\n  // Highlight active component\n  highlightComponent(componentId: string, duration: number = 0.5): void {\n    const element = document.querySelector(`[data-component=\"${componentId}\"]`);\n    if (!element) return;\n\n    gsap.to(element, {\n      scale: 1.05,\n      boxShadow: '0 0 20px rgba(59, 130, 246, 0.5)',\n      duration: duration,\n      yoyo: true,\n      repeat: 1,\n    });\n  }\n\n  // Animate control signal activation\n  activateControlSignal(signalId: string): void {\n    const element = document.querySelector(`[data-signal=\"${signalId}\"]`);\n    if (!element) return;\n\n    gsap.fromTo(element, \n      { opacity: 0.3 },\n      { \n        opacity: 1, \n        duration: 0.3,\n        repeat: 3,\n        yoyo: true,\n      }\n    );\n  }\n\n  // Animate register value change\n  animateRegisterChange(registerIndex: number, newValue: number): void {\n    const element = document.querySelector(`[data-register=\"${registerIndex}\"]`);\n    if (!element) return;\n\n    // Flash animation for value change\n    gsap.fromTo(element,\n      { backgroundColor: '#FEF3C7' },\n      {\n        backgroundColor: '#FFFFFF',\n        duration: 1,\n        ease: 'power2.out',\n      }\n    );\n\n    // Update the value with typewriter effect\n    this.animateValueChange(element, newValue);\n  }\n\n  // Animate flag changes\n  animateFlags(flags: { [key: string]: boolean }): void {\n    Object.entries(flags).forEach(([flag, value]) => {\n      const element = document.querySelector(`[data-flag=\"${flag}\"]`);\n      if (!element) return;\n\n      gsap.to(element, {\n        color: value ? '#10B981' : '#6B7280',\n        scale: value ? 1.1 : 1,\n        duration: 0.3,\n      });\n    });\n  }\n\n  // Create visual data element for animations\n  private createDataElement(data: number): HTMLElement {\n    const element = document.createElement('div');\n    element.className = 'absolute z-50 bg-cpu-blue text-white px-2 py-1 rounded text-xs font-mono pointer-events-none';\n    element.textContent = `0x${data.toString(16).toUpperCase().padStart(8, '0')}`;\n    document.body.appendChild(element);\n    return element;\n  }\n\n  // Remove data element after animation\n  private removeDataElement(element: HTMLElement): void {\n    gsap.to(element, {\n      opacity: 0,\n      scale: 0.8,\n      duration: 0.2,\n      onComplete: () => {\n        element.remove();\n      },\n    });\n  }\n\n  // Animate value change with typewriter effect\n  private animateValueChange(element: Element, newValue: number): void {\n    const hexValue = `0x${newValue.toString(16).toUpperCase().padStart(8, '0')}`;\n    let currentText = '';\n    \n    gsap.to({}, {\n      duration: 0.5,\n      onUpdate: function() {\n        const progress = this.progress();\n        const targetLength = Math.floor(hexValue.length * progress);\n        currentText = hexValue.substring(0, targetLength);\n        element.textContent = currentText;\n      },\n    });\n  }\n\n  // Clear all animations\n  clear(): void {\n    this.timeline.clear();\n    gsap.killTweensOf('*');\n  }\n\n  // Pause all animations\n  pause(): void {\n    this.timeline.pause();\n  }\n\n  // Resume all animations\n  resume(): void {\n    this.timeline.resume();\n  }\n\n  // Set animation speed\n  setSpeed(speed: number): void {\n    gsap.globalTimeline.timeScale(speed);\n  }\n}\n\n// Singleton instance\nexport const animationController = new CPUAnimationController(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}