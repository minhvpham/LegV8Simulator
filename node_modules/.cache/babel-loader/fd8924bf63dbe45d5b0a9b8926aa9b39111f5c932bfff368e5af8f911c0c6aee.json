{"ast":null,"code":"var _jsxFileName = \"/home/hoangnhoo/HTMT/src/components/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport Editor from '@monaco-editor/react';\nimport { useSimulatorStore } from '../store/simulatorStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditor = () => {\n  _s();\n  const editorRef = useRef(null);\n  const [compileResult, setCompileResult] = useState(null);\n  const [isCompiling, setIsCompiling] = useState(false);\n  const {\n    sourceCode,\n    setSourceCode,\n    loadProgram,\n    cpu,\n    currentStep\n  } = useSimulatorStore();\n  const handleEditorDidMount = (editor, monaco) => {\n    editorRef.current = editor;\n\n    // Register LEGv8 language\n    monaco.languages.register({\n      id: 'legv8'\n    });\n\n    // Define LEGv8 syntax highlighting\n    monaco.languages.setMonarchTokensProvider('legv8', {\n      tokenizer: {\n        root: [\n        // Comments\n        [/\\/\\/.*$/, 'comment'], [/\\/\\*/, 'comment', '@comment'],\n        // Instructions\n        [/\\b(ADD|SUB|AND|ORR|EOR|LSL|LSR|BR|B\\.EQ|B\\.NE|B\\.LT|B\\.LE|B\\.GT|B\\.GE|B\\.MI|B\\.PL|B\\.VS|B\\.VC|B\\.HI|B\\.LS|B\\.AL|CBZ|CBNZ|B|BL|ADDI|SUBI|ANDI|ORRI|EORI|LDUR|STUR|LDURB|STURB|LDURH|STURH|LDURSW|MOVZ|MOVK|CMP|CMPI|ADDS|SUBS|ANDS|NOP)\\b/, 'keyword'],\n        // Registers\n        [/\\b(X[0-9]|X[12][0-9]|X3[01]|XZR|SP|LR)\\b/, 'variable'],\n        // Numbers\n        [/#-?\\d+/, 'number'], [/\\b0x[0-9a-fA-F]+\\b/, 'number'], [/\\b\\d+\\b/, 'number'],\n        // Labels\n        [/^[a-zA-Z_][a-zA-Z0-9_]*:/, 'type'],\n        // Strings\n        [/\".*?\"/, 'string'],\n        // Brackets and operators\n        [/[[\\]]/, 'delimiter.bracket'], [/[,]/, 'delimiter']],\n        comment: [[/[^/*]+/, 'comment'], [/\\*\\//, 'comment', '@pop'], [/[/*]/, 'comment']]\n      }\n    });\n\n    // Define LEGv8 theme\n    monaco.editor.defineTheme('legv8-theme', {\n      base: 'vs',\n      inherit: true,\n      rules: [{\n        token: 'keyword',\n        foreground: '0066CC',\n        fontStyle: 'bold'\n      }, {\n        token: 'variable',\n        foreground: '008000',\n        fontStyle: 'bold'\n      }, {\n        token: 'number',\n        foreground: 'FF6600'\n      }, {\n        token: 'comment',\n        foreground: '808080',\n        fontStyle: 'italic'\n      }, {\n        token: 'string',\n        foreground: 'CC0000'\n      }, {\n        token: 'type',\n        foreground: '800080',\n        fontStyle: 'bold'\n      }],\n      colors: {\n        'editor.background': '#FFFFFF',\n        'editor.lineHighlightBackground': '#E3F2FD',\n        'editorLineNumber.foreground': '#999999',\n        'editorLineNumber.activeForeground': '#0066CC'\n      }\n    });\n\n    // Set the theme\n    monaco.editor.setTheme('legv8-theme');\n  };\n  const handleEditorChange = value => {\n    if (value !== undefined) {\n      setSourceCode(value);\n      // Clear previous compile results when code changes\n      setCompileResult(null);\n    }\n  };\n  const validateLEGv8Syntax = code => {\n    const errors = [];\n    const lines = code.split('\\n');\n    let instructionCount = 0;\n\n    // Valid LEGv8 instructions\n    const validInstructions = ['ADD', 'SUB', 'AND', 'ORR', 'EOR', 'LSL', 'LSR', 'ADDI', 'SUBI', 'ANDI', 'ORRI', 'EORI', 'LDUR', 'STUR', 'LDURB', 'STURB', 'LDURH', 'STURH', 'LDURSW', 'B', 'BL', 'BR', 'CBZ', 'CBNZ', 'B.EQ', 'B.NE', 'B.LT', 'B.LE', 'B.GT', 'B.GE', 'B.MI', 'B.PL', 'B.VS', 'B.VC', 'B.HI', 'B.LS', 'B.AL', 'CMP', 'CMPI', 'ADDS', 'SUBS', 'ANDS', 'MOVZ', 'MOVK', 'NOP'];\n\n    // Valid registers\n    const validRegisters = [...Array.from({\n      length: 32\n    }, (_, i) => `X${i}`), 'XZR', 'SP', 'LR', 'FP'];\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n\n      // Skip empty lines and comments\n      if (!trimmedLine || trimmedLine.startsWith('//')) {\n        return;\n      }\n\n      // Check for labels\n      if (trimmedLine.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)) {\n        return; // Valid label\n      }\n\n      // Parse instruction\n      const parts = trimmedLine.split(/\\s+/);\n      if (parts.length === 0) return;\n      const instruction = parts[0].toUpperCase();\n\n      // Check if instruction is valid\n      if (!validInstructions.includes(instruction)) {\n        errors.push({\n          line: index + 1,\n          message: `Unknown instruction: ${instruction}`,\n          type: 'error'\n        });\n        return;\n      }\n      instructionCount++;\n\n      // Basic syntax validation for different instruction types\n      if (['ADD', 'SUB', 'AND', 'ORR', 'EOR'].includes(instruction)) {\n        // R-type: ADD Rd, Rn, Rm\n        if (parts.length !== 4) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 3 operands: ${instruction} Rd, Rn, Rm`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Validate registers\n        const registers = parts.slice(1).map(r => r.replace(',', '').toUpperCase());\n        registers.forEach((reg, regIndex) => {\n          if (!validRegisters.includes(reg)) {\n            errors.push({\n              line: index + 1,\n              message: `Invalid register: ${reg}`,\n              type: 'error'\n            });\n          }\n        });\n      }\n      if (['ADDI', 'SUBI', 'ANDI', 'ORRI', 'EORI'].includes(instruction)) {\n        // I-type: ADDI Rd, Rn, #immediate\n        if (parts.length !== 4) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 3 operands: ${instruction} Rd, Rn, #immediate`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Check immediate value format\n        const immediate = parts[3];\n        if (!immediate.startsWith('#')) {\n          errors.push({\n            line: index + 1,\n            message: `Immediate value must start with #: ${immediate}`,\n            type: 'error'\n          });\n        } else {\n          const value = immediate.substring(1);\n          const numValue = parseInt(value);\n          if (isNaN(numValue) || numValue < -2048 || numValue > 2047) {\n            errors.push({\n              line: index + 1,\n              message: `Immediate value out of range (-2048 to 2047): ${value}`,\n              type: 'warning'\n            });\n          }\n        }\n      }\n      if (['LDUR', 'STUR'].includes(instruction)) {\n        // D-type: LDUR Rt, [Rn, #offset]\n        if (parts.length < 3) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires memory address format: ${instruction} Rt, [Rn, #offset]`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Check memory address format\n        const memoryPart = parts.slice(2).join(' ');\n        if (!memoryPart.match(/\\[.*\\]/)) {\n          errors.push({\n            line: index + 1,\n            message: `Memory address must be enclosed in brackets: ${memoryPart}`,\n            type: 'error'\n          });\n        }\n      }\n      if (['CBZ', 'CBNZ'].includes(instruction)) {\n        // CB-type: CBZ Rt, label\n        if (parts.length !== 3) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 2 operands: ${instruction} Rt, label`,\n            type: 'error'\n          });\n        }\n      }\n      if (instruction.startsWith('B.') || instruction === 'B') {\n        // B-type: B label or B.cond label\n        if (parts.length !== 2 && instruction !== 'B') {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 1 operand: ${instruction} label`,\n            type: 'error'\n          });\n        }\n      }\n    });\n    return {\n      success: errors.filter(e => e.type === 'error').length === 0,\n      errors,\n      instructionCount\n    };\n  };\n  const handleCompile = () => {\n    setIsCompiling(true);\n\n    // Simulate compilation delay\n    setTimeout(() => {\n      const result = validateLEGv8Syntax(sourceCode);\n      setCompileResult(result);\n\n      // If compilation is successful, load the program\n      if (result.success) {\n        parseAndLoadProgram(sourceCode);\n      }\n      setIsCompiling(false);\n    }, 500);\n  };\n  const parseAndLoadProgram = code => {\n    // Parse assembly code into instructions\n    const lines = code.split('\\n').map(line => line.trim()).filter(line => line && !line.startsWith('//') && !line.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/));\n    const instructions = lines.map((line, index) => ({\n      address: index * 4,\n      machineCode: '00000000',\n      assembly: line,\n      type: 'R',\n      fields: {\n        opcode: line.split(/\\s+/)[0] || 'NOP'\n      }\n    }));\n    loadProgram(instructions);\n  };\n\n  // Highlight current line\n  useEffect(() => {\n    if (editorRef.current && cpu.currentInstruction) {\n      const editor = editorRef.current;\n      const model = editor.getModel();\n      if (model) {\n        // Clear previous decorations\n        const oldDecorations = editor.getModel().getAllDecorations();\n        const decorationIds = oldDecorations.filter(d => d.options.className === 'current-line-highlight').map(d => d.id);\n        editor.deltaDecorations(decorationIds, []);\n\n        // Find the actual line number of the current instruction in the source code\n        const sourceLines = sourceCode.split('\\n');\n        let actualLineNumber = 1;\n        let instructionCount = 0;\n        for (let i = 0; i < sourceLines.length; i++) {\n          const line = sourceLines[i].trim();\n          // Skip empty lines, comments, and labels\n          if (line && !line.startsWith('//') && !line.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)) {\n            if (instructionCount === cpu.currentInstructionIndex) {\n              actualLineNumber = i + 1;\n              break;\n            }\n            instructionCount++;\n          }\n        }\n\n        // Add new decoration for current line\n        const decorations = [{\n          range: {\n            startLineNumber: actualLineNumber,\n            startColumn: 1,\n            endLineNumber: actualLineNumber,\n            endColumn: model.getLineMaxColumn(actualLineNumber)\n          },\n          options: {\n            className: 'current-line-highlight',\n            isWholeLine: true,\n            backgroundColor: '#FFE082',\n            marginClassName: 'current-line-margin'\n          }\n        }];\n        editor.deltaDecorations([], decorations);\n\n        // Scroll to current line\n        editor.revealLineInCenter(actualLineNumber);\n      }\n    }\n  }, [cpu.currentInstructionIndex, cpu.currentInstruction, sourceCode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between p-3 bg-gray-50 border-b\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-sm font-semibold text-gray-700\",\n        children: \"LEGv8 Assembly Editor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2 text-xs text-gray-500\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Step: \", currentStep, \"/\", cpu.instructionMemory.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u2022\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"PC: \", cpu.pc]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCompile,\n          disabled: isCompiling || !sourceCode.trim(),\n          className: `px-3 py-1 rounded text-xs font-medium transition-colors ${isCompiling ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : compileResult !== null && compileResult !== void 0 && compileResult.success ? 'bg-green-500 text-white hover:bg-green-600' : compileResult && !compileResult.success ? 'bg-red-500 text-white hover:bg-red-600' : 'bg-blue-500 text-white hover:bg-blue-600'}`,\n          children: isCompiling ? '⏳ Compiling...' : '🔨 Compile'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), compileResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `p-3 border-b ${compileResult.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `text-sm font-medium ${compileResult.success ? 'text-green-800' : 'text-red-800'}`,\n          children: compileResult.success ? '✅ Compilation Successful' : '❌ Compilation Failed'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xs text-gray-600\",\n          children: [compileResult.instructionCount, \" instructions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this), compileResult.errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-1 max-h-24 overflow-y-auto\",\n        children: compileResult.errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `text-xs p-2 rounded ${error.type === 'error' ? 'bg-red-100 text-red-700' : 'bg-yellow-100 text-yellow-700'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-medium\",\n            children: [\"Line \", error.line, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 19\n          }, this), \" \", error.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        height: \"100%\",\n        language: \"legv8\",\n        theme: \"legv8-theme\",\n        value: sourceCode,\n        onChange: handleEditorChange,\n        onMount: handleEditorDidMount,\n        options: {\n          minimap: {\n            enabled: false\n          },\n          fontSize: 14,\n          lineNumbers: 'on',\n          roundedSelection: false,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n          tabSize: 2,\n          insertSpaces: true,\n          wordWrap: 'on',\n          lineNumbersMinChars: 3,\n          glyphMargin: true,\n          folding: false,\n          selectOnLineNumbers: true,\n          selectionHighlight: false,\n          cursorStyle: 'line',\n          renderLineHighlight: 'line'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-2 bg-gray-50 border-t text-xs text-gray-600\",\n      children: /*#__PURE__*/_jsxDEV(\"details\", {\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          className: \"cursor-pointer font-medium\",\n          children: \"LEGv8 Quick Reference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Arithmetic:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 18\n            }, this), \" ADD, SUB, ADDI, SUBI\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Logical:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 18\n            }, this), \" AND, ORR, EOR, ANDI, ORRI, EORI\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Memory:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 18\n            }, this), \" LDUR, STUR, LDURB, STURB\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Branch:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 18\n            }, this), \" B, B.EQ, B.NE, CBZ, CBNZ\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Registers:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 18\n            }, this), \" X0-X31, XZR (zero), SP (stack pointer)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"CVUAANTdfA0MZ97fj0HMQRROpdc=\", false, function () {\n  return [useSimulatorStore];\n});\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Editor","useSimulatorStore","jsxDEV","_jsxDEV","CodeEditor","_s","editorRef","compileResult","setCompileResult","isCompiling","setIsCompiling","sourceCode","setSourceCode","loadProgram","cpu","currentStep","handleEditorDidMount","editor","monaco","current","languages","register","id","setMonarchTokensProvider","tokenizer","root","comment","defineTheme","base","inherit","rules","token","foreground","fontStyle","colors","setTheme","handleEditorChange","value","undefined","validateLEGv8Syntax","code","errors","lines","split","instructionCount","validInstructions","validRegisters","Array","from","length","_","i","forEach","line","index","trimmedLine","trim","startsWith","match","parts","instruction","toUpperCase","includes","push","message","type","registers","slice","map","r","replace","reg","regIndex","immediate","substring","numValue","parseInt","isNaN","memoryPart","join","success","filter","e","handleCompile","setTimeout","result","parseAndLoadProgram","instructions","address","machineCode","assembly","fields","opcode","currentInstruction","model","getModel","oldDecorations","getAllDecorations","decorationIds","d","options","className","deltaDecorations","sourceLines","actualLineNumber","currentInstructionIndex","decorations","range","startLineNumber","startColumn","endLineNumber","endColumn","getLineMaxColumn","isWholeLine","backgroundColor","marginClassName","revealLineInCenter","children","fileName","_jsxFileName","lineNumber","columnNumber","instructionMemory","pc","onClick","disabled","error","height","language","theme","onChange","onMount","minimap","enabled","fontSize","lineNumbers","roundedSelection","scrollBeyondLastLine","automaticLayout","tabSize","insertSpaces","wordWrap","lineNumbersMinChars","glyphMargin","folding","selectOnLineNumbers","selectionHighlight","cursorStyle","renderLineHighlight","_c","$RefreshReg$"],"sources":["/home/hoangnhoo/HTMT/src/components/CodeEditor.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport Editor from '@monaco-editor/react';\nimport { useSimulatorStore } from '../store/simulatorStore';\n\ninterface CompileError {\n  line: number;\n  message: string;\n  type: 'error' | 'warning';\n}\n\ninterface CompileResult {\n  success: boolean;\n  errors: CompileError[];\n  instructionCount: number;\n}\n\nconst CodeEditor: React.FC = () => {\n  const editorRef = useRef<any>(null);\n  const [compileResult, setCompileResult] = useState<CompileResult | null>(null);\n  const [isCompiling, setIsCompiling] = useState(false);\n  \n  const {\n    sourceCode,\n    setSourceCode,\n    loadProgram,\n    cpu,\n    currentStep,\n  } = useSimulatorStore();\n\n  const handleEditorDidMount = (editor: any, monaco: any) => {\n    editorRef.current = editor;\n\n    // Register LEGv8 language\n    monaco.languages.register({ id: 'legv8' });\n\n    // Define LEGv8 syntax highlighting\n    monaco.languages.setMonarchTokensProvider('legv8', {\n      tokenizer: {\n        root: [\n          // Comments\n          [/\\/\\/.*$/, 'comment'],\n          [/\\/\\*/, 'comment', '@comment'],\n          \n          // Instructions\n          [/\\b(ADD|SUB|AND|ORR|EOR|LSL|LSR|BR|B\\.EQ|B\\.NE|B\\.LT|B\\.LE|B\\.GT|B\\.GE|B\\.MI|B\\.PL|B\\.VS|B\\.VC|B\\.HI|B\\.LS|B\\.AL|CBZ|CBNZ|B|BL|ADDI|SUBI|ANDI|ORRI|EORI|LDUR|STUR|LDURB|STURB|LDURH|STURH|LDURSW|MOVZ|MOVK|CMP|CMPI|ADDS|SUBS|ANDS|NOP)\\b/, 'keyword'],\n          \n          // Registers\n          [/\\b(X[0-9]|X[12][0-9]|X3[01]|XZR|SP|LR)\\b/, 'variable'],\n          \n          // Numbers\n          [/#-?\\d+/, 'number'],\n          [/\\b0x[0-9a-fA-F]+\\b/, 'number'],\n          [/\\b\\d+\\b/, 'number'],\n          \n          // Labels\n          [/^[a-zA-Z_][a-zA-Z0-9_]*:/, 'type'],\n          \n          // Strings\n          [/\".*?\"/, 'string'],\n          \n          // Brackets and operators\n          [/[[\\]]/, 'delimiter.bracket'],\n          [/[,]/, 'delimiter'],\n        ],\n        \n        comment: [\n          [/[^/*]+/, 'comment'],\n          [/\\*\\//, 'comment', '@pop'],\n          [/[/*]/, 'comment']\n        ],\n      },\n    });\n\n    // Define LEGv8 theme\n    monaco.editor.defineTheme('legv8-theme', {\n      base: 'vs',\n      inherit: true,\n      rules: [\n        { token: 'keyword', foreground: '0066CC', fontStyle: 'bold' },\n        { token: 'variable', foreground: '008000', fontStyle: 'bold' },\n        { token: 'number', foreground: 'FF6600' },\n        { token: 'comment', foreground: '808080', fontStyle: 'italic' },\n        { token: 'string', foreground: 'CC0000' },\n        { token: 'type', foreground: '800080', fontStyle: 'bold' },\n      ],\n      colors: {\n        'editor.background': '#FFFFFF',\n        'editor.lineHighlightBackground': '#E3F2FD',\n        'editorLineNumber.foreground': '#999999',\n        'editorLineNumber.activeForeground': '#0066CC',\n      }\n    });\n\n    // Set the theme\n    monaco.editor.setTheme('legv8-theme');\n  };\n\n  const handleEditorChange = (value: string | undefined) => {\n    if (value !== undefined) {\n      setSourceCode(value);\n      // Clear previous compile results when code changes\n      setCompileResult(null);\n    }\n  };\n\n  const validateLEGv8Syntax = (code: string): CompileResult => {\n    const errors: CompileError[] = [];\n    const lines = code.split('\\n');\n    let instructionCount = 0;\n\n    // Valid LEGv8 instructions\n    const validInstructions = [\n      'ADD', 'SUB', 'AND', 'ORR', 'EOR', 'LSL', 'LSR',\n      'ADDI', 'SUBI', 'ANDI', 'ORRI', 'EORI',\n      'LDUR', 'STUR', 'LDURB', 'STURB', 'LDURH', 'STURH', 'LDURSW',\n      'B', 'BL', 'BR', 'CBZ', 'CBNZ',\n      'B.EQ', 'B.NE', 'B.LT', 'B.LE', 'B.GT', 'B.GE',\n      'B.MI', 'B.PL', 'B.VS', 'B.VC', 'B.HI', 'B.LS', 'B.AL',\n      'CMP', 'CMPI', 'ADDS', 'SUBS', 'ANDS',\n      'MOVZ', 'MOVK', 'NOP'\n    ];\n\n    // Valid registers\n    const validRegisters = [\n      ...Array.from({length: 32}, (_, i) => `X${i}`),\n      'XZR', 'SP', 'LR', 'FP'\n    ];\n\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n      \n      // Skip empty lines and comments\n      if (!trimmedLine || trimmedLine.startsWith('//')) {\n        return;\n      }\n\n      // Check for labels\n      if (trimmedLine.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)) {\n        return; // Valid label\n      }\n\n      // Parse instruction\n      const parts = trimmedLine.split(/\\s+/);\n      if (parts.length === 0) return;\n\n      const instruction = parts[0].toUpperCase();\n      \n      // Check if instruction is valid\n      if (!validInstructions.includes(instruction)) {\n        errors.push({\n          line: index + 1,\n          message: `Unknown instruction: ${instruction}`,\n          type: 'error'\n        });\n        return;\n      }\n\n      instructionCount++;\n\n      // Basic syntax validation for different instruction types\n      if (['ADD', 'SUB', 'AND', 'ORR', 'EOR'].includes(instruction)) {\n        // R-type: ADD Rd, Rn, Rm\n        if (parts.length !== 4) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 3 operands: ${instruction} Rd, Rn, Rm`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Validate registers\n        const registers = parts.slice(1).map(r => r.replace(',', '').toUpperCase());\n        registers.forEach((reg, regIndex) => {\n          if (!validRegisters.includes(reg)) {\n            errors.push({\n              line: index + 1,\n              message: `Invalid register: ${reg}`,\n              type: 'error'\n            });\n          }\n        });\n      }\n\n      if (['ADDI', 'SUBI', 'ANDI', 'ORRI', 'EORI'].includes(instruction)) {\n        // I-type: ADDI Rd, Rn, #immediate\n        if (parts.length !== 4) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 3 operands: ${instruction} Rd, Rn, #immediate`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Check immediate value format\n        const immediate = parts[3];\n        if (!immediate.startsWith('#')) {\n          errors.push({\n            line: index + 1,\n            message: `Immediate value must start with #: ${immediate}`,\n            type: 'error'\n          });\n        } else {\n          const value = immediate.substring(1);\n          const numValue = parseInt(value);\n          if (isNaN(numValue) || numValue < -2048 || numValue > 2047) {\n            errors.push({\n              line: index + 1,\n              message: `Immediate value out of range (-2048 to 2047): ${value}`,\n              type: 'warning'\n            });\n          }\n        }\n      }\n\n      if (['LDUR', 'STUR'].includes(instruction)) {\n        // D-type: LDUR Rt, [Rn, #offset]\n        if (parts.length < 3) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires memory address format: ${instruction} Rt, [Rn, #offset]`,\n            type: 'error'\n          });\n          return;\n        }\n\n        // Check memory address format\n        const memoryPart = parts.slice(2).join(' ');\n        if (!memoryPart.match(/\\[.*\\]/)) {\n          errors.push({\n            line: index + 1,\n            message: `Memory address must be enclosed in brackets: ${memoryPart}`,\n            type: 'error'\n          });\n        }\n      }\n\n      if (['CBZ', 'CBNZ'].includes(instruction)) {\n        // CB-type: CBZ Rt, label\n        if (parts.length !== 3) {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 2 operands: ${instruction} Rt, label`,\n            type: 'error'\n          });\n        }\n      }\n\n      if (instruction.startsWith('B.') || instruction === 'B') {\n        // B-type: B label or B.cond label\n        if (parts.length !== 2 && instruction !== 'B') {\n          errors.push({\n            line: index + 1,\n            message: `${instruction} requires 1 operand: ${instruction} label`,\n            type: 'error'\n          });\n        }\n      }\n    });\n\n    return {\n      success: errors.filter(e => e.type === 'error').length === 0,\n      errors,\n      instructionCount\n    };\n  };\n\n  const handleCompile = () => {\n    setIsCompiling(true);\n    \n    // Simulate compilation delay\n    setTimeout(() => {\n      const result = validateLEGv8Syntax(sourceCode);\n      setCompileResult(result);\n      \n      // If compilation is successful, load the program\n      if (result.success) {\n        parseAndLoadProgram(sourceCode);\n      }\n      \n      setIsCompiling(false);\n    }, 500);\n  };\n\n  const parseAndLoadProgram = (code: string) => {\n    // Parse assembly code into instructions\n    const lines = code.split('\\n')\n      .map(line => line.trim())\n      .filter(line => line && !line.startsWith('//') && !line.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/));\n\n    const instructions = lines.map((line, index) => ({\n      address: index * 4,\n      machineCode: '00000000',\n      assembly: line,\n      type: 'R' as const,\n      fields: { \n        opcode: line.split(/\\s+/)[0] || 'NOP'\n      }\n    }));\n\n    loadProgram(instructions);\n  };\n\n  // Highlight current line\n  useEffect(() => {\n    if (editorRef.current && cpu.currentInstruction) {\n      const editor = editorRef.current;\n      const model = editor.getModel();\n      \n      if (model) {\n        // Clear previous decorations\n        const oldDecorations = editor.getModel().getAllDecorations();\n        const decorationIds = oldDecorations\n          .filter((d: any) => d.options.className === 'current-line-highlight')\n          .map((d: any) => d.id);\n        \n        editor.deltaDecorations(decorationIds, []);\n\n        // Find the actual line number of the current instruction in the source code\n        const sourceLines = sourceCode.split('\\n');\n        let actualLineNumber = 1;\n        let instructionCount = 0;\n        \n        for (let i = 0; i < sourceLines.length; i++) {\n          const line = sourceLines[i].trim();\n          // Skip empty lines, comments, and labels\n          if (line && !line.startsWith('//') && !line.match(/^[a-zA-Z_][a-zA-Z0-9_]*:$/)) {\n            if (instructionCount === cpu.currentInstructionIndex) {\n              actualLineNumber = i + 1;\n              break;\n            }\n            instructionCount++;\n          }\n        }\n\n        // Add new decoration for current line\n        const decorations = [\n          {\n            range: {\n              startLineNumber: actualLineNumber,\n              startColumn: 1,\n              endLineNumber: actualLineNumber,\n              endColumn: model.getLineMaxColumn(actualLineNumber),\n            },\n            options: {\n              className: 'current-line-highlight',\n              isWholeLine: true,\n              backgroundColor: '#FFE082',\n              marginClassName: 'current-line-margin',\n            },\n          },\n        ];\n\n        editor.deltaDecorations([], decorations);\n\n        // Scroll to current line\n        editor.revealLineInCenter(actualLineNumber);\n      }\n    }\n  }, [cpu.currentInstructionIndex, cpu.currentInstruction, sourceCode]);\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"flex items-center justify-between p-3 bg-gray-50 border-b\">\n        <h3 className=\"text-sm font-semibold text-gray-700\">LEGv8 Assembly Editor</h3>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n            <span>Step: {currentStep}/{cpu.instructionMemory.length}</span>\n            <span>•</span>\n            <span>PC: {cpu.pc}</span>\n          </div>\n          <button\n            onClick={handleCompile}\n            disabled={isCompiling || !sourceCode.trim()}\n            className={`px-3 py-1 rounded text-xs font-medium transition-colors ${\n              isCompiling\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                : compileResult?.success\n                ? 'bg-green-500 text-white hover:bg-green-600'\n                : compileResult && !compileResult.success\n                ? 'bg-red-500 text-white hover:bg-red-600'\n                : 'bg-blue-500 text-white hover:bg-blue-600'\n            }`}\n          >\n            {isCompiling ? '⏳ Compiling...' : '🔨 Compile'}\n          </button>\n        </div>\n      </div>\n      \n      {/* Compile Results */}\n      {compileResult && (\n        <div className={`p-3 border-b ${\n          compileResult.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'\n        }`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className={`text-sm font-medium ${\n              compileResult.success ? 'text-green-800' : 'text-red-800'\n            }`}>\n              {compileResult.success ? '✅ Compilation Successful' : '❌ Compilation Failed'}\n            </span>\n            <span className=\"text-xs text-gray-600\">\n              {compileResult.instructionCount} instructions\n            </span>\n          </div>\n          \n          {compileResult.errors.length > 0 && (\n            <div className=\"space-y-1 max-h-24 overflow-y-auto\">\n              {compileResult.errors.map((error, index) => (\n                <div key={index} className={`text-xs p-2 rounded ${\n                  error.type === 'error' ? 'bg-red-100 text-red-700' : 'bg-yellow-100 text-yellow-700'\n                }`}>\n                  <span className=\"font-medium\">Line {error.line}:</span> {error.message}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      \n      <div className=\"flex-1\">\n        <Editor\n          height=\"100%\"\n          language=\"legv8\"\n          theme=\"legv8-theme\"\n          value={sourceCode}\n          onChange={handleEditorChange}\n          onMount={handleEditorDidMount}\n          options={{\n            minimap: { enabled: false },\n            fontSize: 14,\n            lineNumbers: 'on',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            automaticLayout: true,\n            tabSize: 2,\n            insertSpaces: true,\n            wordWrap: 'on',\n            lineNumbersMinChars: 3,\n            glyphMargin: true,\n            folding: false,\n            selectOnLineNumbers: true,\n            selectionHighlight: false,\n            cursorStyle: 'line',\n            renderLineHighlight: 'line',\n          }}\n        />\n      </div>\n\n      {/* Quick reference */}\n      <div className=\"p-2 bg-gray-50 border-t text-xs text-gray-600\">\n        <details>\n          <summary className=\"cursor-pointer font-medium\">LEGv8 Quick Reference</summary>\n          <div className=\"mt-2 space-y-1\">\n            <div><strong>Arithmetic:</strong> ADD, SUB, ADDI, SUBI</div>\n            <div><strong>Logical:</strong> AND, ORR, EOR, ANDI, ORRI, EORI</div>\n            <div><strong>Memory:</strong> LDUR, STUR, LDURB, STURB</div>\n            <div><strong>Branch:</strong> B, B.EQ, B.NE, CBZ, CBNZ</div>\n            <div><strong>Registers:</strong> X0-X31, XZR (zero), SP (stack pointer)</div>\n          </div>\n        </details>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}