Mnemonic,Format,OpcodeID(Bin),Rec2Loc,UncondBranch,FlagBranch,ZeroBranch,MemRead,MemToReg,MemWrite,FlagWrite,ALUSrc,ALUOp,RegWrite,ALUControlOut,Note
# R-Format
ADD,R,10001011000,0,0,0,0,0,0,0,0,0,10,1,0010,add
ADDS,R,10101011000,0,0,0,0,0,0,0,1,0,10,1,0010,add
AND,R,10001010000,0,0,0,0,0,0,0,0,0,10,1,0000,and
ANDS,R,11101010000,0,0,0,0,0,0,0,1,0,10,1,0000,and
SUB,R,11001011000,0,0,0,0,0,0,0,0,0,10,1,0110,sub
SUBS,R,11101011000,0,0,0,0,0,0,0,1,0,10,1,0110,sub
ORR,R,10101010000,0,0,0,0,0,0,0,0,0,10,1,0001,or
EOR,R,11101010000,0,0,0,0,0,0,0,0,0,10,1,0011, xor
LSR,R,11010011010,x,0,0,0,0,0,0,0,1,10,1,1001,shift right
LSL,R,11010011011,x,0,0,0,0,0,0,0,1,10,1,1000,shift left
BR,R,11010110000,x,1,0,0,0,x,0,0,x,x,0,x,RET ~ BR X30

# I-Format
ORRI,I,1011001000,0,0,0,0,0,0,0,0,1,10,1,0001,or
EORI,I,1101001000,0,0,0,0,0,0,0,0,1,10,1,0011,xor
ADDI,I,1001000100,0,0,0,0,0,0,0,0,1,10,1,0010,add
ADDIS,I,1011000100,0,0,0,0,0,0,0,1,1,10,1,0010,add
ANDI,I,1001001000,0,0,0,0,0,0,0,0,1,10,1,0000,and
ANDIS,I,1111001000,0,0,0,0,0,0,0,1,1,10,1,0000,and
SUBI,I,1101000100,0,0,0,0,0,0,0,0,1,10,1,0110,sub
SUBIS,I,1111000100,0,0,0,0,0,0,0,1,1,10,1,0110,sub

# D-Format
STURB,D,00111000000,1,0,0,0,0,x,1,0,1,00,0,0010,byte(8bits)
LDURB,D,00111000010,x,0,0,0,1,1,0,0,1,00,1,0010,byte(8bits)
STURH,D,01111000000,1,0,0,0,0,x,1,0,1,00,0,0010,halfword(16bits)
LDURH,D,01111000010,x,0,0,0,1,1,0,0,1,00,1,0010,halfword(16bits)
STURW,D,10111000000,1,0,0,0,0,x,1,0,1,00,0,0010,word(32bits)
LDURSW,D,10111000100,x,0,0,0,1,1,0,0,1,00,1,0010,word(32bits)
STUR,D,11111000000,1,0,0,0,0,x,1,0,1,00,0,0010,1984
LDUR,D,11111000010,x,0,0,0,1,1,0,0,1,00,1,0010,1986
# STXR, LDXR

# IM-Format
MOVZ,IM,110100101,x,0,0,0,0,0,0,0,1,11,1,1111,Nap 0 + immediate
MOVK,IM,111100101,x,0,0,0,0,0,0,0,1,11,1,1110,ghi immediate vao bit thich hop

# B-Format
B,B,000101,x,1,0,0,0,x,0,0,x,x,0,x,null
BL,B,100101,x,1,0,0,0,x,0,0,x,x,0,x,"// Luu dia chi quay lai vao X30, dung RET de quay lai"

# CB-Format
CBZ,C,10110100,1,0,0,1,0,x,0,0,0,01,0,0111,null
CBNZ,C,10110101,1,0,0,1,0,x,0,0,0,01,0,0111,null
B.EQ,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,Z=1
B.NE,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,Z=0
B.MI,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,N=1
B.PL,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,N=0
B.VS,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,V=1
B.VC,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,V=0
B.HI,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,(Z=0 & C=1)
B.LS,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,~(Z=0 & C=1)
B.GE,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,N=V
B.LT,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,N!=V
B.GT,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,(Z=0 & N=V)
B.LE,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,~(Z=0 & N=V)
B.HS,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,C=1
B.LO,C,01010100,1,0,1,0,0,x,0,0,0,x,0,x,C=0

# Expand
# MUL,R,10111000000,0,0,0,0,0,0,0,0,0,10,1,1100,// Multiple
# SMULH,R,10011011010,0,0,0,0,0,0,0,0,0,10,1,1100,// Multiple
# UMULH,R,10011011110,0,0,0,0,0,0,0,0,0,10,1,1100,// Multiple
# SDIV,R,10011010110,0,0,0,0,0,0,0,0,0,10,1,1111,// Div
# UDIV,R,10011010111,0,0,0,0,0,0,0,0,0,10,1,1111,// Div

# ALU Control Out
# 0000 - and
# 0001 - or
# 0010 - add
# 0011 - xor
# 0100 - sub + update flag (cmp) -> dont use
# 0110 - sub
# 0111 - pass b
# 1000 - shift left
# 1001 - shift right
# 1010 - Arithmetic shift right -> dont use
# 1011 - mul -> dont use
# 1100 - smulh -> dont use
# 1101 - umulh -> dont use
# 1110 - movk
# 1111 - movz
